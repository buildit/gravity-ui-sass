////
/// Mixins for defining color schemes in CSS.
///
///
/// @group  colours
/// @access public
////


@function grav-color-scheme-class-name($color-scheme-name) {
  @return '.grav-u-color-scheme-#{$color-scheme-name}';
}


/// Returns the CSS custom property name of a given group A color.
@function grav-color-grp-a-prop-name($color-name) {
  @return --grav-co-grp-a-#{$color-name};
}

/// Returns the CSS custom property name of a given group A color.
@function grav-color-grp-b-prop-name($color-name) {
  @return --grav-co-grp-b-#{$color-name};
}


/// Returns the default color scheme's value for a given group A color.
@function grav-color-grp-a-default-value($color-name) {
  $group-a-colors: map-get($grav-co-scheme-default, 'group-a');
  @return map-get($group-a-colors, $color-name);
}

/// Returns the default color scheme's value for a given group A color.
@function grav-color-grp-b-default-value($color-name) {
  $group-b-colors: map-get($grav-co-scheme-default, 'group-b');
  @return map-get($group-b-colors, $color-name);
}


/// Outputs CSS custom property definitions for a color scheme.
@mixin grav-color-scheme-props($color-scheme-map) {
  @each $name, $color in map-get($color-scheme-map, 'group-a') {
    #{grav-color-grp-a-prop-name($name)}: $color;
  }

  @each $name, $color in map-get($color-scheme-map, 'group-b') {
    #{grav-color-grp-b-prop-name($name)}: $color;
  }
}


/// Applys a group A color value to the given CSS property.
///
/// If `$use-fallback` is set, the default colour scheme's color value will be
/// set first as a fallback for older browsers that do not support CSS custom
/// properties.
@mixin grav-color-grp-a-apply($css-property, $color-name, $use-fallback: false) {
  @if $use-fallback {
    #{$css-property}: grav-color-grp-a-default-value($color-name);
  }
  #{$css-property}: var(#{grav-color-grp-a-prop-name($color-name)});
}

/// Applies a group B color value to the given CSS property.
///
/// If `$use-fallback` is set, the default colour scheme's color value will be
/// set first as a fallback for older browsers that do not support CSS custom
/// properties.
@mixin grav-color-grp-b-apply($css-property, $color-name, $use-fallback: false) {
  @if $use-fallback {
    #{$css-property}: grav-color-grp-b-default-value($color-name);
  }
  #{$css-property}: var(#{grav-color-grp-b-prop-name($color-name)});
}


/// Sets the `color` and `background-color` to the `neutral` colors of group A and B
/// respectively.
///
/// Color scheme classes must always do this to visually "apply" the new color scheme
/// to the element they are set on.
@mixin grav-color-scheme-apply($use-fallback: false) {
  @include grav-color-grp-a-apply('background', 'neutral', $use-fallback);
  @include grav-color-grp-b-apply('color', 'neutral', $use-fallback);
}

/// Defines a color scheme CSS class.
@mixin grav-color-scheme-define-class($color-scheme-name, $color-scheme-map) {
  #{grav-color-scheme-class-name($color-scheme-name)} {
    @include grav-color-scheme-props($color-scheme-map);
    @include grav-color-scheme-apply;
  }
}
