// a mixin to add column based layout styles
@mixin grav-l-column-layout($column-count: 2, $column-gap: $grav-sp-l, $additive: false) {
  $column-spacing: $column-gap / 2;

  @if not $additive {
    display: flex;
    flex-wrap: wrap;
    margin-right: -$column-spacing;
    margin-left: -$column-spacing;
    padding-right: 0;
    padding-left: 0;
  }

  // All children start with margin on their sides
  > * {
    width: calc((100% - #{($column-count * 2) * $column-spacing}) / #{$column-count});

    @if not $additive {
      margin-right: $column-spacing;
      margin-left: $column-spacing;
    }
  }

  // Select the top row's children and remove the top margin
  > *:nth-child(-n + #{$column-count}) {
    margin-top: 0;
  }

  @if not $additive {
    > li {
      padding-right: 0;
      padding-left: 0;
    }
  }
}

// a mixin remove list styles which might interfere with column's layout purposes
@mixin grav-l-column-list {
  padding-right: 0;
  padding-left: 0;
  list-style: none;

  > li {
    padding-right: 0;
    padding-left: 0;
  }
}

// a mixin to expand items in column layouts if the final row is not full.
@mixin grav-l-column-no-danglies {
  > * {
    flex-grow: 1;
  }
}

// a mixin that can be applied to items in a "no-danglies" column layout
// to make them span the full width of the parent element.
@mixin grav-l-column-item-full-width($column-count: 2, $margin-top: $grav-sp-vertical-gap) {
  flex-basis: 100%;

  // Multi-column layouts remove the top margin of all items in
  // the first row. If the item being stretched is one of those,
  // then it will necessarily create a new row and therefore need
  // its top margin reinstated. Likewise, subsequent items that
  // would have otherwise been in the first row also need their
  // top margins reinstated.
  &:not(:first-child),
  + :nth-child(-n + #{$column-count}) {
    margin-top: $margin-top;
  }
}
